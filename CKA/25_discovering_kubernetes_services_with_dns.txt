Get existing service
********************

$ kubectl get service svc-clusterip
$ kubectl get pods pod-svc-test

# nslookup on service name

$ kubectl exec pod-svc-test -- nslookup svc-clusterip

Output:
*******

cloud_user@k8s-control:~$  kubectl exec pod-svc-test -- nslookup svc-clusterip
Server:    10.96.0.10
Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local

Name:      10.99.223.12
Address 1: 10.99.223.12 svc-clusterip.default.svc.cluster.local


$ kubectl exec pod-svc-test -- curl 10.99.223.12

# Below one works since both pods are in same namespace
$ kubectl exec pod-svc-test -- curl svc-clusterip

Create a New Namespace
**********************
$ kubectl create namespace new-namespace

$ vi pod-svc-test-new-namespace.yml

apiVersion: v1 
kind: Pod
metadata:
  name: pod-svc-test-new-namespace
  namespace: new-namespace
  labels:
    app: client
spec:
  containers:
  - name: busybox
    image: radial/busyboxplus:curl
    command: ['sh', '-c', 'while true; do sleep 10; done']
    
$ kubectl apply -f pod-svc-test-new-namespace.yml

Try reaching the service from new namespace
*******************************************
Below works since we use IP. It works irrespective of namespace
$ kubectl exec pod-svc-test -- curl 10.99.223.12

$ kubectl exec -n new-namespace pod-svc-test-new-namespace -- curl svc-clusterip

output: curl: (6) Couldn't resolve host 'svc-clusterip'

#test using fully qualifie svc name

$ kubectl exec -n new-namespace pod-svc-test-new-namespace -- curl svc-clusterip.default.svc.cluster.local

Able to connect to nginx


##########################################################################################
lab
***

Using Kubernetes Services with DNS
Introduction
Kubernetes Services can be located with the Kubernetes DNS just like Pods can. In this lab, you will work with the Kubernetes DNS to discover Services from within a Pod. This will test your knowledge of how to interact with Services using DNS.

Solution
Log in to the control plane server using the credentials provided:

ssh cloud_user@<PUBLIC_IP_ADDRESS>
Perform an Nslookup for a Service in the Same Namespace
Start using the busybox Pod in the web namespace to perform an nslookup on the web-frontend Service by entering:

kubectl exec -n web busybox -- nslookup web-frontend
Redirect the output to save the results in a text file by using:

kubectl exec -n web busybox -- nslookup web-frontend >> ~/dns_same_namespace_results.txt
Look up the same Service using the fully qualified domain name by entering:

kubectl exec -n web busybox -- nslookup web-frontend.web.svc.cluster.local
Redirect the output to save the results of the second nslookup in a text file by using:

kubectl exec -n web busybox -- nslookup web-frontend.web.svc.cluster.local >> ~/dns_same_namespace_results.txt
Check that everything looks okay in the text file by using:

cat ~/dns_same_namespace_results.txt
Use clear to clear the text file output.

Perform an Nslookup For a Service in a Different Namespace
Use the busybox Pod in the web namespace to perform an nslookup on the user-db Service in the data namespace, while only utilizing the short Service name, by entering:

kubectl exec -n web busybox -- nslookup user-db
This first request is supposed to result in an error message, so don't be alarmed if you see that we can't resolve user-db.

Save the results of this nslookup in a text file by using:

kubectl exec -n web busybox -- nslookup user-db >> ~/dns_different_namespace_results.txt
Perform the same lookup using the fully qualified domain name by entering:

kubectl exec -n web busybox -- nslookup user-db.data.svc.cluster.local
Save the results in a text file by using:

kubectl exec -n web busybox -- nslookup user-db.data.svc.cluster.local >> ~/dns_different_namespace_results.txt
Check the output in the text file by using:

cat ~/dns_different_namespace_results.txt