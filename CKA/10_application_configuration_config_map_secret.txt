***
Create configmap
****************


vi my-configmap.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-configmap
data:
  key1: Hello, world!
  key2:
    Test
    multiple lines
    more lines
	
kubectl create -f my-configmap.yml  

kubectl describe configmap my-configmap


---------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5    
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true 
	
$ kubectl -f filename.json apply


***
Create Secret
*************

Base64 encode secret Values

$ echo -n 'secret' | base64
c2VjcmV0

$ echo -n 'onemoresecret' | base64
b25lbW9yZXNlY3JldA==

vi my-secret.yml

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  secretkey1: c2VjcmV0
  secretkey2: b25lbW9yZXNlY3JldA==

  
kubectl describe secret my-secret  
    
---------------------------------

apiVersion: v1
kind: Secret
metadata:
  name: secret-sa-sample
  annotations:
    kubernetes.io/service-account.name: "sa-name"
type: kubernetes.io/service-account-token
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  extra: YmFyCg==	
  
  
  
***
Environment Variables
*********************

	create pod
	**********

vi env-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: env-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'echo "configmap: $CONFIGMAPVAR secret: $SECRETVAR"']
    env:
    - name: CONFIGMAPVAR
      valueFrom:
        configMapKeyRef:
          name: my-configmap
          key: key1
    - name: SECRETVAR
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: secretkey1		  
		  
		  
kubectl create -f env-pod.yml

	check logs
	**********
	kubectl logs env-pod
	

Configuration Volumes
*********************
Add volume mounts to the containers

vi volume-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: volume-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'while true; do sleep 3600; done']
    volumeMounts:
    - name: configmap-volume
      mountPath: /etc/config/configmap
    - name: secret-volume
      mountPath: /etc/config/secret  
  volumes:
  - name: configmap-volume
    configMap:
      name: my-configmap
  - name: secret-volume
    secret:
      secretName: my-secret	


kubectl create -f volume-pod.yml

#List top level key folders 
***************************
kubectl exec volume-pod -- ls /etc/config/configmap

#get content of key
********************
kubectl exec volume-pod -- cat /etc/config/configmap/key1

multi line key-value
********************
kubectl exec volume-pod -- cat /etc/config/configmap/key2

secret:
*******
kubectl exec volume-pod -- ls /etc/config/secret

secret data
***********
kubectl exec volume-pod -- cat /etc/config/secret/secretkey1
kubectl exec volume-pod -- cat /etc/config/secret/secretkey2


lab:
****

Passing Configuration Data to a Kubernetes Container
Introduction
Kubernetes has multiple options for storing and managing configuration data. This lab will focus on the process of passing that configuration data to your containers in order to configure applications. You will have the opportunity to work with application configuration in Kubernetes hands-on by passing some existing configuration data stored in Secrets and ConfigMaps to a container.

Solution
Log in to the provided lab server using the credentials provided:

ssh cloud_user@<PUBLIC_IP_ADDRESS>
Generate an htpasswd File and Store It as a Secret
Generate an htpasswd file:

# creating user name as user and write to file .htpasswd
htpasswd -c .htpasswd user
Create a password you can easily remember (we'll need it again later).

View the file's contents:

cat .htpasswd
Create a Secret containing the htpasswd data:

kubectl create secret generic nginx-htpasswd --from-file .htpasswd
Delete the .htpasswd file:

rm .htpasswd
Create the Nginx Pod
Create pod.yml:

vi pod.yml
Set vi to 'paste' mode by hitting :, and then typing set paste (ENTER). Then switch back to INSERT mode by hitting i.

Enter the following to create the pod and mount the Nginx config and htpasswd Secret data:

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.19.1
    ports:
    - containerPort: 80
    volumeMounts:
    - name: config-volume
      mountPath: /etc/nginx
    - name: htpasswd-volume
      mountPath: /etc/nginx/conf
  volumes:
  - name: config-volume
    configMap:
      name: nginx-config
  - name: htpasswd-volume
    secret:
      secretName: nginx-htpasswd
Save and exit the file by pressing Escape followed by :wq.

View the existing ConfigMap:

kubectl get cm
Get more info about nginx-config:

kubectl describe cm nginx-config
Create the pod:

kubectl apply -f pod.yml
Check the status of your pod and get its IP address:

kubectl get pods -o wide
Its IP address will be listed once it has a Running status. We'll use this in the final two commands.

Within the existing busybox pod, without using credentials, verify everything is working:

kubectl exec busybox -- curl <NGINX_POD_IP>
We'll see HTML for the 401 Authorization Required page â€” but this is a good thing, as it means our setup is working as expected.

Run the same command again using credentials (including the password you created at the beginning of the lab) to verify everything is working:

kubectl exec busybox -- curl -u user:<PASSWORD> <NGINX_POD_IP>
This time, we'll see the Welcome to nginx! page HTML.



