Master Node:
************

$ kubectl get nodes
$ kubectl describe nodes
    # check conditions in output to see if anything is wrong with the nodes
$ sudo systemctl status kubelet

Switch to Worker Node:
**********************
# for testing stop and disable kubelet
$ sudo systemctl stop kubelet
$ sudo systemctl disable kubelet
$ sudo systemctl status kubelet

  # go to control plane and check $ kubectl get status # it will return not ready for above node.

# restart kubelet and enable
$ sudo systemctl start kubelet
$ sudo systemctl enable kubelet  

  # go to control plane and check $ kubectl get status # it will be ready again.
  
Master Node:
************
$ kubectl get pods -n kube-system


lab:
#################################

Troubleshooting a Broken Kubernetes Cluster
Introduction
Every Kubernetes administrator will likely need to deal with a broken cluster at some point, whether a single node or the entire cluster is down. In this lab, you will be able to practice your troubleshooting skills. You will be presented with a broken Kubernetes cluster and asked to use your investigative skills to identify the problem and fix it.

Solution
Log in to the control plane node server using the credentials provided:

ssh cloud_user@<PUBLIC_IP_ADDRESS>
Determine What is Wrong with the Cluster
Find out which node is having a problem by using kubectl get nodes. Identify if a node is in the NotReady state.

Get more information on the node by using kubectl describe node <NODE_NAME>.

Look for the Conditions section of the Node Information and find out what is affecting the node's status, causing it to fail.

Log in to the worker 2 node server using the credentials provided:

ssh cloud_user@<PUBLIC_IP_ADDRESS>
Look at the kubelet logs of the worker 2 node by using sudo journalctl -u kubelet.

Go to the end of the log by pressing Shift + G and see the error messages stating that kubelet has stopped.

Look at the status of the kubelet status by using sudo systemctl status kubelet, and note whether the kubelet service is running or not.

Fix the Problem
In order to fix the problem, we need to not only start the server but also enable kubelet to ensure that it continues to work if the server restarts in the future. Use clear to clear the service status, and then start and enable kubelet by using sudo systemctl enable kubelet, followed by sudo systemctl start kubelet.

Check if kubelet is active by using sudo systemctl status kubelet, and note if the service is listed as active (running).

Return to the control plane node.

Check if all nodes are now in a Ready status by using kubectl get nodes. You may have to wait and try the command a few times before all nodes appear as Ready.