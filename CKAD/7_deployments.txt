Deployment
**********

$ vi nginx-deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        
$ kubectl apply -f nginx-deployment.yml
$ kubectl get deployments

Scale deployments
*****************

$ kubectl scale deployment/nginx-deployment --replicas=4
$ kubectl get pods -l=app=nginx --show-labels

Another way to scale deployment
*******************************

$ kubectl edit nginx-deployment

Delete Pod and check if deployment scales up
********************************************

$ kubectl delete pod nginx-deployment-66b6c48dd5-l6wnp 
$ kubectl get pods
# new pod will be created replacing the deleted pod

Exam Tips:
**********
Tip1: A Deployment actively manages a desired state for a set of replica Pods.
Tip2: The Pod template provides the Pod configuration that the Deployment will use to create new Pods
Tip3: The replicas field sets the number of replicas. You can scale up or down by changing this value.