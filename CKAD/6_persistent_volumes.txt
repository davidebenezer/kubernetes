PersistentVolume
****************

$ vi hostpath-pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: hostpath-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: slow
  hostPath:
    path: /etc/hostPath
    type: Directory

$ kubectl apply -f hostPath-pv.yml

****

$ vi hostpath-pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hostpath-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: slow
  
$ kubectl apply -f hostPath-pvc.yml

***

$ vi pv-pod-test.yml

apiVersion: v1
kind: Pod
metadata:
  name: pv-pod-test
spec:
  restartPolicy: OnFailure
  containers:
  - name: busybox
    image: busybox:stable
    command: ['sh', '-c', 'cat /data/data.txt']
    volumeMounts:
    - name: pv-host-data
      mountPath: /data
  volumes:
  - name: pv-host-data
    persistentVolumeClaim:
      claimName: hostpath-pvc
      
$ kubectl apply -f pv-pod-test.yml
$ kubectl logs pv-pod-test

Exam Tips:
Tip1: A PersistentVolume defines a storage resource.
Tip2: A PersistentVolumeClaim defines a request to consume a storage resource
Tip3: PersistentVolumeClaims automatically bind to a PersistentVolume that meets their criteria.

lab:
############################

Using Container Volume Storage in Kubernetes
Introduction
Kubernetes offers a variety of tools to help you manage external storage for your containers. In this lab, you will have a chance to work with Kubernetes storage volumes, in the form of both ephemeral volumes and Persistent Volumes.

Solution
Log in to the server using the credentials provided:

ssh cloud_user@<PUBLIC_IP_ADDRESS>
Add an Ephemeral Volume
Begin by editing the application's Deployment:

kubectl edit deployment app-processing
Scroll down to the Deployment's Pod template. Under the Pod template, note the Pod specification. Add the following (under terminationMessagePolicy) to create the ephemeral storage volume with the volume mount.

Note: When copying and pasting code into Vim from the lab guide, first enter :set paste (and then i to enter insert mode) to avoid adding unnecessary spaces and hashes. To save and quit the file, press Escape followed by :wq. To exit the file without saving, press Escape followed by :q!.

```
        volumeMounts:
        - name: temp
          mountPath: /tempdata
      volumes:
      - name: temp
        emptyDir: {}
```
Type ESC followed by :wq to save your changes and to update the Deployment.
Add a Persistent Volume
Create the PersistentVolume.

vi hostdata-pv.yml
Add the following to create the PersistentVolume:

apiVersion: v1
kind: PersistentVolume
metadata:
  name: hostdata-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: host
  hostPath:
    path: /etc/voldata
    type: Directory
Type ESC followed by :wq to save your changes.

Apply the changes to create the volume:

kubectl apply -f hostdata-pv.yml
Create a PersistentVolumeClaim:

vi hostdata-pvc.yml
Add the following to create the PersistentVolumeClaim that will bind to the PersistentVolume:

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hostdata-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: host
Type ESC followed by :wq to save your changes.

Create the claim:

kubectl apply -f hostdata-pvc.yml
Verify that the PersistentVolumeClaim is bound to the PersistentVolume:

kubectl get pvc hostdata-pvc
Edit the Deployment, and mount the PersistentVolumeClaim to the container:

kubectl edit deployment app-processing
Scroll down to the volume spec. Under volumes, add the hostdata volume:

      volumes:
      - name: temp
        emptyDir: {}
      - name: hostdata
        persistentVolumeClaim:
          claimName: hostdata-pvc
Scroll up, and under volumeMounts, mount the new volume to the container:

        volumeMounts:
        - name: temp
          mountPath: /tempdata
        - name: hostdata
          mountPath: /data
Type ESC followed by :wq to save your changes and update the Deployment.

Check the Pod status:

kubectl get pods
You should see that your new Pod for the Deployment is up and running.

Copy the name of the active Deployment Pod. The name will begin with app-processing-, but it will be the Pod that is in the Running status â€” not the Terminating status. Use the Pod name to check the Pod's container logs:

kubectl logs $POD_NAME
If everything is set up correctly, you should see the Hive Key data in the Pod's logs.