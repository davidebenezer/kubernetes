* Create 3 medium with Ubuntu Bionic 18.4

Step 1: Do on all nodes
========================
		Do on Master
			sudo hostnamectl set-hostname k8s-master
		Do on worker1
			sudo hostnamectl set-hostname k8s-worker1
		Do on worker2
			sudo hostnamectl set-hostname k8s-worker2
		
Step 2: since host name is changed. update the /etc/hosts in all servers
========================================================================

172.31.42.90 k8s-master
172.31.47.197 k8s-worker1
172.31.47.243 k8s-worker2
		

All 3 nodes including master
****************************

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay

sudo modprobe br_netfilter

Networking Confugurations needed for containerd and kubernetes
*****************************************************************

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

***
install and configure containerd on all nodes
*********************************************

sudo apt-get update && sudo apt-get install -y containerd

sudo mkdir -p /etc/containerd

sudo containerd config default | sudo tee /etc/containerd/config.toml

sudo systemctl restart containerd

***
On all nodes, disable swap for kubernetes to work
*************************************************

sudo swapoff -a

sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

***
On all nodes, install kubeadm, kubelet, and kubectl.
****************************************************

sudo apt-get update && sudo apt-get install -y apt-transport-https curl

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update

sudo apt-get install -y kubelet=1.22.0-00 kubeadm=1.22.0-00 kubectl=1.22.0-00

sudo apt-mark hold kubelet kubeadm kubectl

***
On the control plane node only, initialize the cluster and set up kubectl access.
*********************************************************************************

sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.22.0

mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

	***
	Verify the cluster is working.
	******************************

	kubectl version
	kubectl get nodes
	
	***
	Install the Calico network add-on to enable networking and make the nodes to ready
	***********************************************************************************

	kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
	
	***
	Check the calico-related kube-system Pods to verify that everything is working so far (they may take a few moments to fully start up).
	**************************************************************************************************************************************
	
	kubectl get pods -n kube-system
	
	***
	Get the join command (this command is also printed during kubeadm init. Feel free to simply copy it from there).
	****************************************************************************************************************

	kubeadm token create --print-join-command
	
	*** run below on worker nodes**
	*******************************
	
	kubeadm join 172.31.31.165:6443 --token aphl4w.ho18xy5fx78zkttd     --discovery-token-ca-cert-hash sha256:d07cf6fddfd44769183ca415e01459d1c60a9db80833dbc056cb971f6b0502f9
	
								**if you get any errors during join that the files already exist, please reset kubeadm using below command and then run join on worker nodes******
								**************************************************************************************************************************************************
								
								sudo kubeadm reset

								***
	On the control plane node, verify all nodes in your cluster are ready. Note that it may take a few moments for all of the nodes to enter the READY state.
	*********************************************************************************************************************************************************

	kubectl get nodes
	